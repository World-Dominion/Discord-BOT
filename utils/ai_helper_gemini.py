"""
Module d'int√©gration avanc√©e avec Google Gemini AI pour World Dominion
G√©n√®re du contenu dynamique, vari√© et immersif bas√© sur le nouveau prompt syst√®me
"""

import os
import json
import random
from typing import Dict, Any, List, Optional
from datetime import datetime

try:
    import google.generativeai as genai
except ImportError:
    genai = None

# Configuration Gemini
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if genai and GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# NOUVEAU PROMPT SYST√àME COMPLET
SYSTEM_PROMPT = """
# Prompt Gemini - G√©n√©rateur d'Id√©es pour Jeu d'√âl√©ments Discord

Tu es un assistant cr√©atif qui aide √† imaginer des m√©caniques de jeu et des id√©es pour un syst√®me d'attractions Discord.

## Contexte
Un bot Discord o√π les joueurs collectionnent des √©l√©ments r√©els issus de 6 cat√©gories :
- üß™ √âl√©ments chimiques (118 √©l√©ments : H, C, Au, U...)
- üåø Esp√®ces vivantes (~8,7M : animaux, plantes, champignons... grisons)
- üíé Min√©raux (5000+ : Quartz, Diamant, Pyrite...)
- üçé Aliments (milliers : fruits, viandes, fromages...)
- üîß Objets manufactur√©s (millions : outils, √©lectronique, v√™tements...)
- üí° Concepts & ≈ìuvres (infinis : id√©es, art, musique...)

Base de donn√©es : Supabase avec tables `elements`, `players`, `transactions`

## Le r√¥le 
Quand on te demande, propose des id√©es pour :

### M√©caniques de jeu pouss√©e 
- Syst√®mes d'attractions th√©matiques
- √âv√©nements temporaires (ex: "Semaine des √©l√©ments rares")
- Combos et synergies entre √©l√©ments
- D√©fis de collection (ex: "Collectionne tous les gaz nobles")
- Syst√®me d'√©change entre joueurs

### Fonctionnalit√©s pr√©cis 
- Commandes Discord utiles et fun
- Syst√®mes de progression/niveaux
- R√©compenses et achievements
- Mini-jeux bas√©s sur les √©l√©ments
- Classements et comp√©titions

### Contenus r√©aliste & √©ducatif
- Fa√ßons d'apprendre via le jeu
- Quiz et √©nigmes sur les √©l√©ments
- Faits int√©ressants √† partager
- Liens entre diff√©rents √©l√©ments

### √âquilibrage
- Syst√®mes de raret√© coh√©rents
- √âconomie du jeu (si √©changes)
- Probabilit√©s d'obtention
- Valeur relative des √©l√©ments

## Style de r√©ponses
- Cr√©atif et innovant
- Ludique mais r√©fl√©chi
- Donne 3-5 id√©es par demande
- Explique pourquoi l'id√©e est int√©ressante
- Pense √† la faisabilit√© technique
"""

def get_model():
    """R√©cup√©rer le mod√®le Gemini configur√©"""
    if genai is None:
        raise ValueError("google-generativeai n'est pas install√©. Installez-le avec: pip install google-generativeai")
    
    if not GEMINI_API_KEY:
        raise ValueError("GEMINI_API_KEY n'est pas configur√© dans les variables d'environnement")
    
    # Utiliser gemini-1.5-flash pour une meilleure rapidit√©
    model = genai.GenerativeModel('gemini-1.5-flash')
    return model

def generate_vibrant_element(element_type: str, element_name: str, context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """
    G√âN√àRE UN √âL√âMENT DYNAMIQUE ET VIVANT avec variations al√©atoires
    
    Args:
        element_type: Type d'√©l√©ment
        element_name: Nom de l'√©l√©ment
        context: Contexte du pays
    
    Returns:
        Dict avec d√©tails g√©n√©r√©s avec IA avanc√©e
    """
    try:
        model = get_model()
        
        # Context enrichi
        country_context = ""
        if context:
            country_context = f"""
Contexte du pays '{context.get('country_name', 'Un pays inconnu')}' :
- √âconomie: {context.get('economy', 0)}/100
- Stabilit√©: {context.get('stability', 0)}%
- Force Militaire: {context.get('army_strength', 0)}/100
- Ressources: {context.get('resources', {})}
- Date du jour: {datetime.now().strftime('%Y-%m-%d')}
"""
        
        # G√©n√©rer des variations th√©matiques
        themes = [
            "√©l√©ment historique et l√©gendaire",
            "d√©couverte scientifique r√©cente",
            "objet manufactur√© futuriste",
            "creature rare et mystique",
            "concept philosophique profond"
        ]
        theme = random.choice(themes)
        
        prompt = f"""
{SYSTEM_PROMPT}

## DEMANDE ACTUELLE

Un joueur souhaite cr√©er un nouvel √©l√©ment dans World Dominion.
{country_context}

Type d'√©l√©ment : {element_type}
Nom de l'√©l√©ment : {element_name}
Th√®me souhait√© : {theme}

## √Ä G√âN√âRER

Cr√©e un √©l√©ment unique, original et immersif. Sois cr√©atif !

G√©n√®re au format JSON STRICT (sans markdown) :

{{
  "name": "{element_name}",
  "type": "{element_type}",
  "description": "Description vivante et immersive (2-3 phrases max, parle comme dans un jeu)",
  "lore": "Histoire/lore court de cet √©l√©ment (1 phrase)",
  "materials": ["mat√©riau1", "mat√©riau2", "mat√©riau3"],
  "cost": nombre_entre_100_et_5000,
  "rarity": "commun|rare|√©pique|l√©gendaire|divin",
  "time_to_build": "temps comme '2h', '1j', '3j'",
  "effects": {{
    "economy": nombre_entre_-15_et_+15,
    "stability": nombre_entre_-15_et_+15,
    "army_strength": nombre_entre_-15_et_+15
  }},
  "special_abilities": ["capacit√©1", "capacit√©2"],
  "fun_fact": "Fait amusant ou √©ducatif sur cet √©l√©ment",
  "discovery_chance": nombre_entre_0_et_100
}}

R√®gles IMPORTANTES :
- Description : Sois cr√©atif, parle de mani√®re immersive, utilise des m√©taphores si √ßa colle au th√®me
- Materials : Utilise des mat√©riaux r√©alistes (Fer, Bois, Or, Textiles, √âlectronique, etc.)
- Raret√© : Divin = unique, L√©gendaire = ultra rare, √âpique = rare, Rare = peu commun, Commun = commun
- Effects : √âquilibre les effets selon la raret√©
- Special abilities : Ajoute des capacit√©s fun ou int√©ressantes (max 2)
- Fun fact : Classification naturelle de l'√©l√©ment
- Discovery chance : Probabilit√© qu'un joueur trouve cet √©l√©ment naturellement (0-100%)

R√©ponds UNIQUEMENT avec le JSON, SANS markdown, SANS backticks.
"""
        
        response = model.generate_content(prompt)
        response_text = response.text.strip()
        
        # Nettoyer la r√©ponse
        if "```json" in response_text:
            response_text = response_text.split("```json")[1].split("```")[0].strip()
        elif "```" in response_text:
            response_text = response_text.split("```")[1].split("```")[0].strip()
        
        result = json.loads(response_text)
        
        # Ajouter des m√©tadonn√©es
        result['created_at'] = datetime.now().isoformat()
        result['theme'] = theme
        
        return result
        
    except json.JSONDecodeError as e:
        print(f"Erreur parsing JSON IA: {e}")
        return _get_fallback_element(element_name, element_type)
    except Exception as e:
        print(f"Erreur g√©n√©ration IA: {e}")
        return _get_fallback_element(element_name, element_type)

def _get_fallback_element(name: str, element_type: str) -> Dict[str, Any]:
    """Fallback si l'IA √©choue"""
    materials_map = {
        "chimique": ["Laboratoire", "R√©actifs", "Energie"],
        "vivant": ["√âcosyst√®me", "Nourriture", "Eau"],
        "min√©ral": ["Extraction", "Minerai brut", "Outils"],
        "aliment": ["Ingr√©dients", "√âpices", "Chaleur"],
        "objet": ["M√©tal", "√âlectronique", "Textiles"],
        "concept": ["Inspiration", "Sagesse", "Innovation"]
    }
    
    return {
        'name': name,
        'type': element_type,
        'description': f"Un {name} fascinant pour enrichir votre pays.",
        'lore': "D√©couvert dans les archives anciennes du monde.",
        'materials': materials_map.get(element_type, ["Mati√®res premi√®res", "Main d'≈ìuvre"]),
        'cost': random.randint(300, 1500),
        'rarity': 'commun',
        'time_to_build': '2h',
        'effects': {'economy': 0, 'stability': 0, 'army_strength': 0},
        'special_abilities': ["Capacit√© de base"],
        'fun_fact': f"L'√©l√©ment {name} est unique dans sa cat√©gorie.",
        'discovery_chance': 50,
        'theme': 'standard'
    }

def generate_economic_analysis(country_data: Dict[str, Any]) -> str:
    """G√©n√®re une analyse √©conomique pouss√©e avec l'IA"""
    try:
        model = get_model()
        
        prompt = f"""
{SYSTEM_PROMPT}

## ANALYSE √âCONOMIQUE DEMAND√âE

Analyse l'√©tat √©conomique du pays suivant et propose une strat√©gie d√©taill√©e :

```json
{json.dumps(country_data, indent=2)}
```

Donne une analyse en 3 parties :
1. √âtat actuel (forces et faiblesses)
2. Opportunit√©s disponibles
3. Recommandations strat√©giques (3 actions concr√®tes)

R√©ponds de mani√®re concise et actionnable (150 mots max).
"""
        
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Erreur g√©n√©ration analyse: {e}")
        return "Analyse en cours de g√©n√©ration..."

def generate_event_narrative(event_type: str, country_data: Dict[str, Any]) -> str:
    """G√©n√®re un r√©cit d'√©v√©nement immersif"""
    try:
        model = get_model()
        
        prompt = f"""
{SYSTEM_PROMPT}

## G√âN√âRATION D'√âV√âNEMENT

Type d'√©v√©nement : {event_type}
Pays concern√© : {country_data.get('name', 'Un pays')}

G√©n√®re un r√©cit court (3-4 phrases) d√©crivant cet √©v√©nement de mani√®re immersive et narrative.
Utilise un ton appropri√© au type d'√©v√©nement (dramatique pour crise, positif pour boom, etc.).

R√©ponds UNIQUEMENT avec le r√©cit, sans introduction.
"""
        
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Erreur g√©n√©ration √©v√©nement: {e}")
        return f"Un √©v√©nement de type {event_type} a frapp√© le pays."

def generate_discovery_idea() -> Dict[str, Any]:
    """G√©n√®re une id√©e de d√©couverte al√©atoire"""
    try:
        model = get_model()
        
        element_types = ["chimique", "vivant", "min√©ral", "aliment", "objet", "concept"]
        random_type = random.choice(element_types)
        
        prompt = f"""
{SYSTEM_PROMPT}

## D√âCOUVERTE AL√âATOIRE

G√©n√®re une id√©e de d√©couverte surprenante de type "{random_type}" qui pourrait √™tre trouv√©e dans le jeu.

Format JSON :
{{
  "name": "nom cr√©atif et original",
  "type": "{random_type}",
  "description": "ce qui a √©t√© d√©couvert",
  "rarity": "rare|√©pique|l√©gendaire",
  "potential_uses": ["usage1", "usage2"],
  "real_world_fact": "fait r√©el sur cet √©l√©ment"
}}

R√©ponds UNIQUEMENT avec le JSON.
"""
        
        response = model.generate_content(prompt)
        response_text = response.text.strip()
        
        if "```" in response_text:
            response_text = response_text.split("```")[1].split("```")[0].strip()
        
        return json.loads(response_text)
    except Exception as e:
        print(f"Erreur g√©n√©ration d√©couverte: {e}")
        return {
            'name': 'D√©couverte myst√©rieuse',
            'type': 'concept',
            'description': 'Une d√©couverte fascinante attend d\'√™tre explor√©e.',
            'rarity': 'rare',
            'potential_uses': ['recherche', 'innovation']
        }

# Fonction de compatibilit√© avec l'ancienne version
def generate_element_details(element_type: str, element_name: str, context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """Wrapper pour compatibilit√© avec l'ancien code"""
    return generate_vibrant_element(element_type, element_name, context)

